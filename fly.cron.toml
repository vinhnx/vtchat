# Fly.io cron machine configuration for database maintenance
# Optimized for scheduled tasks and maintenance operations
app = 'vtchat-cron'
primary_region = 'sin'

[build]
  # Use minimal build for cron tasks
  buildpacks = []

[env]
  # Production environment for cron tasks
  NODE_ENV = 'production'
  LOG_LEVEL = 'info'  # More verbose logging for maintenance tasks
  
  # Application endpoints
  BASE_URL = 'https://vtchat.io.vn'
  
  # Cron-specific settings
  RUNNER_ENVIRONMENT = 'fly-cron'
  
  # Enhanced timeout and retry settings for maintenance
  TIMEOUT_MS = '300000'        # 5 minutes timeout
  MAX_RETRIES = '3'            # Retry failed operations
  INITIAL_RETRY_DELAY = '2000' # 2 second initial delay
  MAX_RETRY_DELAY = '30000'    # 30 second max delay
  
  # Memory optimization for ultra-minimal cron machine
  NODE_OPTIONS = '--max-old-space-size=96'   # Optimize for 128MB memory

# Cron machine - ultra-minimal resources for cost efficiency
[[vm]]
  memory = '128mb'      # Ultra-minimal memory for cron tasks
  cpu_kind = 'shared'   # Shared CPU is sufficient
  cpus = 1

# Cron jobs configuration
# These run as scheduled processes, not HTTP services
[processes]
  # Hourly maintenance cron job
  hourly_maintenance = 'node scripts/cron-database-maintenance.js hourly'
  
  # Weekly maintenance cron job  
  weekly_maintenance = 'node scripts/cron-database-maintenance.js weekly'

# No HTTP service needed for pure cron machine
# Comment out or remove if using process-based cron jobs
[http_service]
  internal_port = 3000
  auto_stop_machines = 'stop'      # Stop when not needed
  auto_start_machines = false      # Don't auto-start for HTTP
  min_machines_running = 0         # No always-on requirement
  
  # Health check for monitoring cron machine status
  [[http_service.checks]]
    grace_period = "60s"
    interval = "300s"  # Check every 5 minutes
    method = "GET"
    timeout = "30s"
    path = "/api/health"

# Alternative: Use external cron triggers instead of machine processes
# This allows for better monitoring and control via GitHub Actions
# See .github/workflows/database-maintenance.yml for implementation
