import { createId, verifyId } from 'legid';
import { nanoid } from 'nanoid';

/**
 * Generate a new thread ID using legid (async version)
 * Creates safe, URL-compatible IDs that can be verified server-side
 */
export async function generateThreadId(): Promise<string> {
    return await createId();
}

/**
 * Generate a thread ID synchronously for React components
 * Falls back to nanoid for immediate use, but should be replaced with legid server-side
 */
export function generateThreadIdSync(): string {
    // Use nanoid for now - this will be migrated to legid server-side
    return nanoid();
}

/**
 * Verify a thread ID was generated by legid
 * Returns true if the ID is valid, false otherwise
 */
export async function verifyThreadId(id: string): Promise<boolean> {
    return await verifyId(id);
}

/**
 * Check if a thread ID uses the old format (nanoid/uuid)
 * Used for migration purposes
 */
export function isLegacyThreadId(id: string): boolean {
    // Legacy IDs are either:
    // - nanoid: 21 characters, alphanumeric + _ and -
    // - uuid: 36 characters with dashes
    const nanoidPattern = /^[A-Za-z0-9_-]{21}$/;
    const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;

    return nanoidPattern.test(id) || uuidPattern.test(id);
}
