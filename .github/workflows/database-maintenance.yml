name: Database Maintenance

on:
  schedule:
    # Hourly maintenance (every hour)
    - cron: '0 * * * *'
    # Weekly maintenance (Sundays at 2 AM UTC) 
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to run'
        required: true
        default: 'hourly'
        type: choice
        options:
          - hourly
          - weekly

concurrency:
  group: db-maintenance-${{ github.event.schedule || github.event.inputs.maintenance_type || 'manual' }}
  cancel-in-progress: false

# Enhanced security permissions for OIDC
permissions:
  contents: read
  id-token: write  # For OIDC token requests
  actions: read    # For workflow status checks

jobs:
  database-maintenance:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production  # Use environment for additional security
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Determine maintenance type
        id: maintenance-type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ inputs.maintenance_type }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.schedule }}" = "0 2 * * 0" ]; then
            echo "type=weekly" >> $GITHUB_OUTPUT
          else
            echo "type=hourly" >> $GITHUB_OUTPUT
          fi

      - name: Configure OIDC and secure environment
        id: configure-security
        run: |
          # Validate required environment variables exist
          if [ -z "${{ secrets.FLY_APP_URL }}" ]; then
            echo "‚ùå FLY_APP_URL secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.CRON_SECRET_TOKEN }}" ]; then
            echo "‚ùå CRON_SECRET_TOKEN secret is required"
            exit 1
          fi
          
          # Additional security validations
          echo "‚úÖ Security configuration validated"
          echo "üîê OIDC token available: ${{ github.token != '' }}"
          echo "üåê Environment: ${{ github.ref_name }}"
          echo "‚è∞ Maintenance type: ${{ steps.maintenance-type.outputs.type }}"

      - name: Run database maintenance
        env:
          BASE_URL: ${{ secrets.FLY_APP_URL }}
          CRON_SECRET_TOKEN: ${{ secrets.CRON_SECRET_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}  # OIDC token for enhanced security
          RUNNER_ENVIRONMENT: "github-actions"
          MAINTENANCE_TYPE: ${{ steps.maintenance-type.outputs.type }}
          # Enhanced security environment variables
          MAX_RETRIES: "3"
          TIMEOUT_MS: "300000"  # 5 minutes
          INITIAL_RETRY_DELAY: "2000"  # 2 seconds
          MAX_RETRY_DELAY: "30000"  # 30 seconds
        run: |
          # Set stricter bash options for security
          set -euo pipefail
          
          # Validate maintenance type
          case "${{ steps.maintenance-type.outputs.type }}" in
            hourly|weekly)
              echo "‚úÖ Valid maintenance type: ${{ steps.maintenance-type.outputs.type }}"
              ;;
            *)
              echo "‚ùå Invalid maintenance type: ${{ steps.maintenance-type.outputs.type }}"
              exit 1
              ;;
          esac
          
          # Run maintenance with enhanced logging
          echo "üöÄ Starting database maintenance..."
          node scripts/cron-database-maintenance.js ${{ steps.maintenance-type.outputs.type }}

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Database maintenance failed! Check the logs above."
          echo "This indicates a potential issue with the database or application."
          # You can add Slack/Discord/email notifications here if needed

  health-check:
    runs-on: ubuntu-latest
    needs: database-maintenance
    if: always()
    
    steps:
      - name: Check application health
        env:
          HEALTH_URL: ${{ secrets.FLY_APP_URL }}
        run: |
          echo "üîç Checking application health after maintenance..."
          HEALTH_URL=${HEALTH_URL:-"https://vtchat.io.vn"}
          curl -f -s "${HEALTH_URL}/api/health" || {
            echo "‚ùå Health check failed!"
            exit 1
          }
          echo "‚úÖ Application is healthy"
